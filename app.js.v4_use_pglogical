require('dotenv').config();
const http = require('http');
const os = require('os');
const express = require('express');
const { Pool } = require('pg');

// Initialize Express
const app = express();

// Determine hostname and primary IPv4 address
const hostname = os.hostname();
const networkInterfaces = os.networkInterfaces();
let ip = 'unknown';
for (const ifaceList of Object.values(networkInterfaces)) {
  for (const iface of ifaceList) {
    if (iface.family === 'IPv4' && !iface.internal) {
      ip = iface.address;
      break;
    }
  }
  if (ip !== 'unknown') break;
}

// Database connection pools
const localPool = new Pool({
  host: process.env.DB_HOST,
  port: process.env.DB_PORT,
  database: process.env.DB_NAME,
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
});

const masterPool = new Pool({
  host: '192.168.230.204',
  port: process.env.DB_PORT,
  database: process.env.DB_NAME,
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
});

// Smart query handler
const dbPool = {
  smartQuery: async (queryText, values = []) => {
    try {
      const firstWord = queryText.trim().split(/\s+/)[0].toUpperCase();
      
      if (['SELECT'].includes(firstWord)) {
        console.log(`Routing to LOCAL pool: ${queryText}`);
        return await localPool.query(queryText, values);
      } 
      else if (['UPDATE', 'INSERT', 'DELETE', 'PATCH'].includes(firstWord)) {
        console.log(`Routing to MASTER pool: ${queryText}`);
        return await masterPool.query(queryText, values);
      }
      else {
        console.log(`Routing to LOCAL pool (default): ${queryText}`);
        return await localPool.query(queryText, values);
      }
    } catch (err) {
      console.error('Error in smartQuery:', err);
      throw err;
    }
  }
};

// Client-side JavaScript
const clientScript = `
<script>
  async function updateCount() {
    const newCount = document.getElementById('count').value;
    try {
      const response = await fetch('/update-count?count=' + newCount);
      const data = await response.json();
      document.getElementById('local-count').textContent = data.newCount;
    } catch (error) {
      console.error('Error updating count:', error);
    }
  }

  function clearInput() {
    document.getElementById('count').value = '';
  }

  async function getLocalCount() {
    try {
      const response = await fetch('/get-count');
      const data = await response.json();
      document.getElementById('count').value = data.count;
    } catch (error) {
      console.error('Error getting local count:', error);
    }
  }
</script>
`;

// Endpoints
app.get('/update-count', async (req, res) => {
  try {
    const newCount = parseInt(req.query.count);
    await dbPool.smartQuery(
      'UPDATE public.users SET count = $1 WHERE id = 1;',
      [newCount]
    );
    res.json({ success: true, newCount });
  } catch (err) {
    console.error('Error updating count:', err);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});

app.get('/get-count', async (req, res) => {
  try {
    const { rows } = await localPool.query(
      'SELECT count FROM public.users WHERE id = 1;'
    );
    res.json({ count: rows[0].count });
  } catch (err) {
    console.error('Error getting count:', err);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});

// Home route
app.get('/', async (req, res) => {
  try {
    const { rows } = await localPool.query(
      'SELECT count FROM public.users WHERE id = 1;'
    );
    const currentCount = rows[0].count;

    const responseHtml = `
      <html>
        <head>
          <title>PostgreSQL Test</title>
          <style>
            body { font-family: Arial, sans-serif; margin: 20px; }
            .counters { margin-top: 20px; border: 1px solid #ccc; padding: 15px; border-radius: 5px; }
            .counter { margin: 5px 0; display: flex; align-items: center; }
            .counter-value { min-width: 50px; display: inline-block; }
            .btn { margin-left: 10px; padding: 5px 10px; cursor: pointer; }
            .input-group { margin-bottom: 15px; display: flex; align-items: center; }
            input { padding: 5px; margin-right: 10px; }
          </style>
          ${clientScript}
        </head>
        <body>
          <h1>XBOX-3 subscriber: PostgreSQL Autosychronization Demo</h1>
          
          <div class="input-group">
            <label for="count">Count:</label>
            <input type="number" id="count" value="${currentCount}">
            <button class="btn" onclick="updateCount()">Update</button>
            <button class="btn" onclick="clearInput()">Clear</button>
            <button class="btn" onclick="getLocalCount()">Get Local</button>
          </div>
          
        </body>
      </html>
    `;

    res.send(responseHtml);
  } catch (err) {
    console.error('Error:', err);
    res.status(500).send('Internal Server Error');
  }
});
// Start HTTP server
//http.createServer(app).listen(80, () => {
//  console.log(`✅ HTTP server on ${hostname} (${ip}) running on port 80`);
//});

http.createServer(app).listen(40000, () => {
  console.log(`✅ HTTP server on ${hostname} (${ip}) running on port 40000`);
});

