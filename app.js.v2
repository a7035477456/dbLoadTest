require('dotenv').config();
const http = require('http');
const os = require('os');
const express = require('express');
const { Pool } = require('pg');

// Initialize Express
const app = express();

// Determine hostname and primary IPv4 address
const hostname = os.hostname();
const networkInterfaces = os.networkInterfaces();
let ip = 'unknown';
for (const ifaceList of Object.values(networkInterfaces)) {
  for (const iface of ifaceList) {
    if (iface.family === 'IPv4' && !iface.internal) {
      ip = iface.address;
      break;
    }
  }
  if (ip !== 'unknown') break;
}

// Database connection pools
const localPool = new Pool({
  host: process.env.DB_HOST,
  port: process.env.DB_PORT,
  database: process.env.DB_NAME,
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
});

// Master (publisher) node configuration - always 192.168.174.204
const masterPool = new Pool({
  host: '192.168.174.204',
  port: process.env.DB_PORT,
  database: process.env.DB_NAME,
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
});

// Add JavaScript for refresh functionality
const clientScript = `
<script>
  async function refreshCount(type) {
    try {
      const response = await fetch('/get-count?type=' + type);
      const data = await response.json();
      document.getElementById(type + '-count').textContent = data.count;
      
      // Update the sync status
      const localCount = parseInt(document.getElementById('local-count').textContent);
      const masterCount = parseInt(document.getElementById('master-count').textContent);
      const statusElement = document.getElementById('sync-status');
      
      if (isNaN(localCount) || isNaN(masterCount)) {
        statusElement.innerHTML = '<span class="error">⚠️ Unable to verify</span>';
      } else if (localCount === masterCount) {
        statusElement.innerHTML = '<span class="success">✅ Replication working!</span>';
      } else {
        statusElement.innerHTML = '<span class="error">⚠️ Replication issue!</span>';
      }
    } catch (error) {
      console.error('Error refreshing count:', error);
    }
  }
</script>
`;

// Add endpoint to get counts
app.get('/get-count', async (req, res) => {
  try {
    let count;
    if (req.query.type === 'local') {
      const { rows } = await localPool.query(
        `SELECT count FROM public.users WHERE id = 1;`
      );
      count = rows[0].count;
    } else if (req.query.type === 'master') {
      const { rows } = await masterPool.query(
        `SELECT count FROM public.users WHERE id = 1;`
      );
      count = rows[0].count;
    } else {
      return res.status(400).json({ error: 'Invalid type' });
    }
    res.json({ count });
  } catch (err) {
    console.error('Error getting count:', err);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});

// Home route - shows form and counts
app.get('/', async (req, res) => {
  try {
    // Get current count from local DB
    const { rows: localRows } = await localPool.query(
      `SELECT count FROM public.users WHERE id = 1;`
    );
    const currentCount = localRows[0].count;

    // Update count if query parameter is provided
    if (req.query.count) {
      const newCount = parseInt(req.query.count);
      await localPool.query(
        `UPDATE public.users SET count = $1 WHERE id = 1;`,
        [newCount]
      );
    }

    // Get count from master DB
    let masterCount;
    try {
      const { rows: masterRows } = await masterPool.query(
        `SELECT count FROM public.users WHERE id = 1;`
      );
      masterCount = masterRows[0].count;
    } catch (err) {
      console.error('Error querying master node:', err);
      masterCount = 'unavailable';
    }

    // Render the response
    const responseHtml = `
      <html>
        <head>
          <title>PostgreSQL Replication Test</title>
          <style>
            body { font-family: Arial, sans-serif; margin: 20px; }
            .counters { margin-top: 20px; border: 1px solid #ccc; padding: 15px; border-radius: 5px; }
            .counter { margin: 5px 0; display: flex; align-items: center; }
            .counter-value { min-width: 50px; display: inline-block; }
            .refresh-btn { margin-left: 10px; padding: 2px 5px; font-size: 12px; }
            .success { color: green; }
            .error { color: red; }
            form { margin-bottom: 20px; }
          </style>
          ${clientScript}
        </head>
        <body>
          <h1>PostgreSQL Replication Test</h1>
          <form method="GET" action="/">
            <label for="count">Count:</label>
            <input type="number" id="count" name="count" value="${currentCount}">
            <button type="submit">Update</button>
          </form>
          
          <div class="counters">
            <div class="counter">
              <strong>Count Local DB (${hostname}):</strong> 
              <span id="local-count" class="counter-value">${currentCount}</span>
              <button class="refresh-btn" onclick="refreshCount('local')">Refresh</button>
            </div>
            <div class="counter">
              <strong>Count Master DB (192.168.174.204):</strong> 
              <span id="master-count" class="counter-value">${masterCount}</span>
              <button class="refresh-btn" onclick="refreshCount('master')">Refresh</button>
            </div>
            <div class="counter" id="sync-status">
              ${masterCount === currentCount ? 
                '<span class="success">✅ Replication working!</span>' : 
                '<span class="error">⚠️ Replication issue!</span>'}
            </div>
          </div>
        </body>
      </html>
    `;

    res.send(responseHtml);
  } catch (err) {
    console.error('Error:', err);
    res.status(500).send('Internal Server Error');
  }
});

// Start HTTP server on port 80
http.createServer(app).listen(80, () => {
  console.log(`✅ HTTP server on ${hostname} (${ip}) running on port 80`);
});
